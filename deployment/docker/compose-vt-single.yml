services:

  hotrod:
    # HotROD (Rides on Demand) is a demo application that generates trace data and sends to VictoriaTraces.
    # Visit :8080 after the deployment and click any button on the page to generate trace spans.
    image: jaegertracing/example-hotrod:1.70.0
    ports:
      - "8080:8080"
      - "8083:8083"
    command:
      - "all"
    environment:
      - OTEL_EXPORTER_OTLP_TRACES_ENDPOINT=http://victoriatraces:10428/insert/opentelemetry/v1/traces
    depends_on:
      - victoriatraces

  # Grafana instance configured with VictoriaLogs as datasource
  grafana:
    image: grafana/grafana:12.0.2
    depends_on:
      - "victoriametrics"
      - "victoriatraces"
    ports:
      - 3000:3000
    volumes:
      - grafanadata:/var/lib/grafana
      - ./provisioning/datasources/victoriametrics-traces-datasource/single.yml:/etc/grafana/provisioning/datasources/single.yml
      - ./provisioning/dashboards:/etc/grafana/provisioning/dashboards
      - ./provisioning/plugins/:/var/lib/grafana/plugins
      - ./../../dashboards/victoriatraces.json:/var/lib/grafana/dashboards/vt.json
    restart: always

  #  VictoriaTraces instance, a single process responsible for
  #  storing trace span and serving read queries.
  victoriatraces:
    image: 'docker.io/victoriametrics/victoria-traces:v0.1.0'
    ports:
      - "10428:10428"
    command:
      - "--storageDataPath=/vtraces"
    volumes:
      - vtdata:/vtraces

  # VictoriaMetrics instance, a single process responsible for
  # scraping, storing metrics and serve read requests.
  victoriametrics:
    image: victoriametrics/victoria-metrics:v1.120.0
    ports:
      - "8428:8428"
    volumes:
      - vmdata:/storage
      - ./prometheus-vt-single.yml:/etc/prometheus/prometheus.yml
    command:
      - "--storageDataPath=/storage"
      - "--promscrape.config=/etc/prometheus/prometheus.yml"
    restart: always

  # vmalert executes alerting and recording rules on VictoriaMetrics.
  vmalert-metrics:
    image: victoriametrics/vmalert:v1.120.0
    depends_on:
      - "alertmanager"
      - "victoriametrics"
    ports:
      - 8880:8880
    volumes:
      - ./rules/alerts-vtraces.yml:/etc/alerts/vtraces.yml
      - ./rules/alerts-health.yml:/etc/alerts/alerts-health.yml
    command:
      # it evaluates data against VictoriaMetrics
      - "--datasource.url=http://victoriametrics:8428/"
      # results of alerting and recording rules are persisted to VictoriaMetrics only
      - "--remoteWrite.url=http://victoriametrics:8428/"
      # alerts state is restored from VictoriaMetrics on restarts
      - "--remoteRead.url=http://victoriametrics:8428/"
      - "--notifier.url=http://alertmanager:9093/"
      - "--rule=/etc/alerts/*.yml"
    restart: always

  # vmalert executes alerting and recording rules on VictoriaTraces.
  vmalert-traces:
    image: victoriametrics/vmalert:v1.120.0
    depends_on:
      - "alertmanager"
      - "victoriatraces"
      - "victoriametrics"
    ports:
      - 8881:8881
    volumes:
      - ./vtraces-example-alerts.yml:/etc/alerts/vtraces-example-alerts.yml
    command:
      - "--httpListenAddr=0.0.0.0:8881"
      # it evaluates data against VictoriaTraces
      - "--datasource.url=http://victoriatraces:10428/"
      # results of alerting and recording rules are persisted to VictoriaMetrics only
      - "--remoteWrite.url=http://victoriametrics:8428/"
      # alerts state is restored from VictoriaMetrics on restarts
      - "--remoteRead.url=http://victoriametrics:8428/"
      - "--notifier.url=http://alertmanager:9093/"
      - "--rule=/etc/alerts/*.yml"
    restart: always

  # alertmanager receives alerting notifications from vmalert
  # and distributes them according to --config.file.
  alertmanager:
    image: prom/alertmanager:v0.28.0
    volumes:
      - ./alertmanager.yml:/config/alertmanager.yml
    command:
      - "--config.file=/config/alertmanager.yml"
    ports:
      - 9093:9093
    restart: always

volumes:
  vmdata: {}
  vtdata: {}
  grafanadata: {}